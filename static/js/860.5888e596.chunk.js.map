{"version":3,"file":"static/js/860.5888e596.chunk.js","mappings":"oRAEaA,EAAUC,EAAAA,GAAAA,GAAH,4HAQPC,EAASD,EAAAA,GAAAA,GAAH,qHAMNE,EAAMF,EAAAA,GAAAA,IAAH,4EAMHG,EAAOH,EAAAA,GAAAA,IAAH,+DAKJI,EAAOJ,EAAAA,GAAAA,IAAH,yCAIJK,EAAIL,EAAAA,GAAAA,EAAH,wFAMDM,EAAKN,EAAAA,GAAAA,EAAH,+C,SCwBf,MApDA,WACE,OAAgCO,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,IAEXE,EAAAA,EAAAA,IAAkBL,GACfM,MAAK,SAAAC,GAEJ,IAAgBC,EAAWD,EAAnBA,KAAQC,KAIhB,GAFAT,EAAYS,GAEQ,IAAhBA,EAAKC,OACP,OAAOC,EAAAA,GAAAA,MAAY,gDAGtBC,OAAM,SAAAC,GAEL,OADAC,QAAQC,IAAI,kCAAmCF,GACxCF,EAAAA,GAAAA,MAAY,gDAEpBK,SAAQ,WACPC,YAAW,WACTb,GAAW,KACV,UAEN,CAACH,KAGF,gCACGE,IAAW,SAACe,EAAA,EAAD,IACXnB,IACC,SAACT,EAAD,UACGS,EAASoB,KAAI,gBAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,aAA5B,OACZ,UAAC/B,EAAD,YACE,SAACE,EAAD,WACE,SAACD,EAAD,CAAK+B,IAAKD,EAAe,kCAAoCA,EAxCzD,8DAwCqFE,IAAKJ,OAEhG,UAAC1B,EAAD,YACE,SAACC,EAAD,UAAIyB,IACHC,IAAa,UAACzB,EAAD,yBAAgByB,UANrBF,a,8EC3CZM,E,QAAiBnC,GAAAA,IAAH,8F,SCO3B,EANe,kBACb,SAACmC,EAAD,WACE,SAACC,EAAA,EAAD,CAAiBC,KAAM,GAAIC,UAAW,IAAKC,MAAO,IAAKC,MAAM,UAAUC,eAAe,4B,0MCHpFC,EAAU,mCACVC,EAAW,+BAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQC,IAAAA,IAAA,UAAaF,EAAb,uCAAoDD,IAD5D,0GAIA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,iFACQF,IAAAA,IAAA,UAAaF,EAAb,iCAA8CD,EAA9C,iCAA8EK,EAA9E,yBADR,0GAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,iFACQJ,IAAAA,IAAA,UAAaF,EAAb,kBAA+BM,EAA/B,oBAAiDP,IADzD,0GAGA,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAAiCmC,GAAjC,iFACQL,IAAAA,IAAA,UAAaF,EAAb,kBAA+BO,EAA/B,4BAA0DR,IADlE,0GAIA,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,iFACQL,IAAAA,IAAA,UAAaF,EAAb,kBAA+BO,EAA/B,4BAA0DR,IADlE","sources":["components/CastInfo/CastInfo.styled.jsx","components/CastInfo/CastInfo.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","fetchApi/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const MainBox = styled.ul`\r\n  padding: 0 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 24px;\r\n`;\r\n\r\nexport const LiItem = styled.li`\r\n  display: flex;\r\n  flex-direction: column;justify-content: space-between;\r\n  width: 160px;\r\n`;\r\n\r\nexport const Img = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: auto;\r\n`;\r\n\r\nexport const Div1 = styled.div`\r\n  max-width: 250px;\r\n  height: 240px;\r\n`;\r\n\r\nexport const Div2 = styled.div`\r\n  height: 91px;\r\n`;\r\n\r\nexport const P = styled.p`\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  text-align: center;\r\n`;\r\n\r\nexport const P2 = styled.p`\r\n  text-align: center;\r\n`;","import { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchMovieCredits } from '../../fetchApi/fetchApi';\r\nimport { toast } from 'react-hot-toast';\r\nimport Loader from '../Loader/Loader';\r\nimport { MainBox, LiItem, Img, Div1, Div2, P, P2 } from './CastInfo.styled';\r\n\r\nconst noPosterImg = 'https://sd.keepcalms.com/i/sorry-no-picture-available-2.png';\r\n\r\nfunction Cast() {\r\n  const [castInfo, setCastInfo] = useState([]);\r\n  const { moviesId } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    fetchMovieCredits(moviesId)\r\n      .then(data => {\r\n        \r\n        const { data: { cast } } = data;\r\n\r\n        setCastInfo(cast);\r\n\r\n        if (cast.length === 0) {\r\n          return toast.error('There is no information about the cast...');\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.log('Whoops, something went wrong...', error);\r\n        return toast.error('There is no information about the cast...');\r\n      })\r\n      .finally(() => {\r\n        setTimeout(() => {\r\n          setLoading(false);\r\n        }, 1000)\r\n      });\r\n  }, [moviesId]);    \r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      {castInfo && (                \r\n        <MainBox>\r\n          {castInfo.map(({cast_id, name, character, profile_path}) => (\r\n            <LiItem key={cast_id}>\r\n              <Div1>\r\n                <Img src={profile_path ? 'https://image.tmdb.org/t/p/w500' + profile_path : noPosterImg} alt={name} />\r\n              </Div1>\r\n              <Div2>\r\n                <P>{name}</P>\r\n                {character && <P2>Character: {character}</P2>}\r\n              </Div2>\r\n            </LiItem>\r\n          ))}\r\n        </MainBox>\r\n      )}\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Cast;","import styled from 'styled-components';\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;","import {SpinnerCircular} from 'spinners-react';\r\nimport { SpinnerWrapper } from './Loader.styled';\r\n\r\nconst Loader = () => (\r\n  <SpinnerWrapper>\r\n    <SpinnerCircular size={50} thickness={100} speed={100} color=\"#1eee0b\" secondaryColor=\"rgba(0, 0, 0, 0.44)\" />\r\n  </SpinnerWrapper>\r\n);\r\n\r\nexport default Loader;","import axios from \"axios\";\r\n\r\nconst API_KEY = '330e0c7492d2da195764b5f6a5017e6c';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport async function fetchTrendCollection() {\r\n  return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n};\r\n\r\nexport async function fetchMovieByKeyWord(value) {\r\n  return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${value}&include_adult=false`);\r\n};\r\n\r\nexport async function fetchMovieById(filmId) {\r\n  return await axios.get(`${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`);  \r\n};\r\nexport async function fetchMovieCredits(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n};\r\n\r\nexport async function fetchMovieReviews(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);  \r\n};"],"names":["MainBox","styled","LiItem","Img","Div1","Div2","P","P2","useState","castInfo","setCastInfo","moviesId","useParams","loading","setLoading","useEffect","fetchMovieCredits","then","data","cast","length","toast","catch","error","console","log","finally","setTimeout","Loader","map","cast_id","name","character","profile_path","src","alt","SpinnerWrapper","SpinnerCircular","size","thickness","speed","color","secondaryColor","API_KEY","BASE_URL","fetchTrendCollection","axios","fetchMovieByKeyWord","value","fetchMovieById","filmId","movieId","fetchMovieReviews"],"sourceRoot":""}