{"version":3,"file":"static/js/834.93d38620.chunk.js","mappings":"gMAEaA,E,QAAiBC,GAAAA,IAAH,8F,SCO3B,EANe,kBACb,SAACD,EAAD,WACE,SAACE,EAAA,EAAD,CAAiBC,KAAM,GAAIC,UAAW,IAAKC,MAAO,IAAKC,MAAM,UAAUC,eAAe,4B,0MCHpFC,EAAU,mCACVC,EAAW,+BAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQC,IAAAA,IAAA,UAAaF,EAAb,uCAAoDD,IAD5D,0GAIA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,iFACQF,IAAAA,IAAA,UAAaF,EAAb,iCAA8CD,EAA9C,iCAA8EK,EAA9E,yBADR,0GAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,iFACQJ,IAAAA,IAAA,UAAaF,EAAb,kBAA+BM,EAA/B,oBAAiDP,IADzD,0GAGA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,iFACQN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,4BAA0DT,IADlE,0GAIA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,iFACQN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,4BAA0DT,IADlE,4G,gMCjBMW,EAAOlB,EAAAA,GAAAA,KAAH,0CAIJmB,EAAMnB,EAAAA,GAAAA,IAAH,kEAKHoB,EAAMpB,EAAAA,GAAAA,IAAH,4EAMHqB,EAAOrB,EAAAA,GAAAA,IAAH,6CAIJsB,EAAOtB,EAAAA,GAAAA,IAAH,+CAIJuB,EAASvB,EAAAA,GAAAA,OAAH,mMAYNwB,GAAaxB,EAAAA,EAAAA,IAAOyB,EAAAA,GAAPzB,CAAH,2CAIV0B,GAAkB1B,EAAAA,EAAAA,IAAO2B,EAAAA,GAAP3B,CAAH,oE,SChCrB,SAAS4B,IAAoB,IAAD,MACzBC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,QAAOH,GAmBzB,OAjBAI,EAAAA,EAAAA,YAAU,WACRL,GAAW,IAEXtB,EAAAA,EAAAA,IAAegB,GAAUY,MAAK,SAAAC,GAC5B,MAA+EA,EAAvEA,KAAQC,EAAhB,EAAgBA,YAAaC,EAA7B,EAA6BA,MAAOC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,SAAUC,EAApD,EAAoDA,aAAcC,EAAlE,EAAkEA,OAElEf,EAAS,CACPgB,OAAQN,EAAe,kCAAoCA,EAhB/C,8DAgB2EC,MAAAA,EAAOC,KAAAA,EAAMC,SAAUA,GAAsB,uBAAwBC,aAAAA,EAAcG,aAAiC,IAAlBF,EAAOG,OAAgB,sBAAyBH,EAAOI,KAAI,kBAAe,CAAf,EAAGP,SAAqBQ,KAAK,WAGlRC,OAAM,SAAAC,GAEL,OADAC,QAAQC,IAAI,kCAAmCF,GACxCG,EAAAA,GAAAA,MAAY,sDAEpBC,SAAQ,kBAAMC,YAAW,WAAQzB,GAAW,KAAU,UACxD,CAACN,KAGF,UAACX,EAAD,YACE,SAAC,KAAD,CAAS2C,SAAS,cACjB3B,IAAW,SAAC4B,EAAA,EAAD,KACZ,SAACvC,EAAD,CAAQwC,KAAK,SAAb,UAAsB,UAACvC,EAAD,CAAYwC,GAAE,oBAAE1B,EAAU2B,eAAZ,iBAAE,EAAmBC,aAArB,aAAE,EAA0BC,YAA5B,YAAyCD,MAAO,CAAEC,KAAM7B,EAAU2B,SAAhF,WAA2F,SAAC,MAAD,IAA3F,gBAErBjC,IACC,UAACb,EAAD,YACE,SAACE,EAAD,WACE,SAACD,EAAD,CAAKgD,IAAKpC,EAAMiB,OAAQoB,IAAKrC,EAAMY,MAAQZ,EAAMY,MAAQZ,EAAMa,UAEjE,UAACvB,EAAD,YACE,wBAAKU,EAAMY,MAAQZ,EAAMY,MAAQZ,EAAMa,QACvC,wCAAqC,GAArBb,EAAMe,aAAtB,QACA,sCACA,uBAAIf,EAAMc,YACV,oCACA,uBAAId,EAAMkB,sBAIhB,mBACA,oDAEA,2BACE,yBACE,SAACxB,EAAD,CAAiBsC,GAAE,kBAAanC,EAAb,SAA8BqC,MAAO,CAAEC,KAAM7B,EAAU2B,SAA1E,qBAIF,yBACE,SAACvC,EAAD,CAAiBsC,GAAE,kBAAanC,EAAb,YAAiCqC,MAAO,CAAEC,KAAM7B,EAAU2B,SAA7E,2BAKJ,mBACA,SAAC,KAAD","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","fetchApi/fetchApi.js","page/MovieDetailsPages.styled.jsx","page/MovieDetailsPages.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;","import {SpinnerCircular} from 'spinners-react';\r\nimport { SpinnerWrapper } from './Loader.styled';\r\n\r\nconst Loader = () => (\r\n  <SpinnerWrapper>\r\n    <SpinnerCircular size={50} thickness={100} speed={100} color=\"#1eee0b\" secondaryColor=\"rgba(0, 0, 0, 0.44)\" />\r\n  </SpinnerWrapper>\r\n);\r\n\r\nexport default Loader;","import axios from \"axios\";\r\n\r\nconst API_KEY = '330e0c7492d2da195764b5f6a5017e6c';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport async function fetchTrendCollection() {\r\n  return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n};\r\n\r\nexport async function fetchMovieByKeyWord(value) {\r\n  return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${value}&include_adult=false`);\r\n};\r\n\r\nexport async function fetchMovieById(filmId) {\r\n  return await axios.get(`${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`);  \r\n};\r\nexport async function fetchMovieCredits(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n};\r\n\r\nexport async function fetchMovieReviews(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);  \r\n};","import styled from 'styled-components';\r\nimport { Link, NavLink} from \"react-router-dom\";\r\n\r\nexport const Main = styled.main`\r\n  padding: 20px;\r\n`;\r\n\r\nexport const Box = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Img = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: auto;\r\n`;\r\n\r\nexport const Div1 = styled.div`\r\n  max-width: 250px;\r\n`;\r\n\r\nexport const Div2 = styled.div`\r\n  padding-left: 20px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  background-color: #ad08ee;\r\n  border: none;\r\n  border-radius: 5px;\r\n  opacity: 0.8;\r\n  &:hover, &:focus {\r\n  opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const LinkStyled = styled(Link)`\r\n  color: #000000;\r\n`;\r\n\r\nexport const LinkStyledAddIn = styled(NavLink)`\r\n  &.active {\r\n    color: #ff4747;\r\n  }    \r\n`;","import { useState, useEffect, useRef } from \"react\";\r\nimport { useLocation, useParams, Outlet } from \"react-router-dom\";\r\nimport { fetchMovieById } from '../fetchApi/fetchApi';\r\nimport { Toaster, toast } from 'react-hot-toast';\r\nimport Loader from '../components/Loader/Loader';\r\nimport { ImArrowLeft } from \"react-icons/im\";\r\nimport { Main, Box, Div1, Div2, Img, LinkStyled, Button, LinkStyledAddIn } from './MovieDetailsPages.styled';\r\n\r\nconst noPosterImg = 'https://sd.keepcalms.com/i/sorry-no-picture-available-2.png';\r\n\r\nexport function MovieDetailsPage() {\r\n  const { moviesId } = useParams();\r\n  const [movie, setMovie] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const location = useLocation();\r\n  const grandPath = useRef(location);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n\r\n    fetchMovieById(moviesId).then(data => {\r\n      const { data: { poster_path, title, name, overview, vote_average, genres } } = data;\r\n\r\n      setMovie({\r\n        poster: poster_path ? ('https://image.tmdb.org/t/p/w500' + poster_path) : noPosterImg, title, name, overview: overview ? overview : \"There is no overview\", vote_average, genresValues: (genres.length === 0) ? \"There are no genres\" : (genres.map(({ name }) => ([name])).join(\", \"))\r\n      });\r\n    })\r\n      .catch(error => {\r\n        console.log('Whoops, something went wrong...', error);\r\n        return toast.error('Sorry, there is no film. Try another request...');\r\n      })\r\n      .finally(() => setTimeout(() => { setLoading(false) }, 1000));\r\n  }, [moviesId]);\r\n\r\n  return (\r\n    <Main>\r\n      <Toaster position=\"top-right\" />\r\n      {loading && <Loader />}\r\n      <Button type=\"button\"><LinkStyled to={grandPath.current?.state?.from ?? `/`} state={{ from: grandPath.current }}><ImArrowLeft /> Go back</LinkStyled></Button>\r\n\r\n      {movie && (\r\n        <Box>\r\n          <Div1>\r\n            <Img src={movie.poster} alt={movie.title ? movie.title : movie.name} />\r\n          </Div1>\r\n          <Div2>\r\n            <h1>{movie.title ? movie.title : movie.name}</h1>\r\n            <p>User Score: {movie.vote_average * 10}%</p>\r\n            <h2>Overview</h2>\r\n            <p>{movie.overview}</p>\r\n            <h3>Genres</h3>\r\n            <p>{movie.genresValues}</p>\r\n          </Div2>      \r\n        </Box>                    \r\n      )}\r\n      <hr />\r\n      <h3>Additional information</h3>\r\n\r\n      <ul>\r\n        <li>\r\n          <LinkStyledAddIn to={`/movies/${moviesId}/cast`} state={{ from: grandPath.current }}>\r\n            Cast\r\n          </LinkStyledAddIn>\r\n        </li>\r\n        <li>\r\n          <LinkStyledAddIn to={`/movies/${moviesId}/reviews`} state={{ from: grandPath.current }}>\r\n            Reviews\r\n          </LinkStyledAddIn>\r\n        </li>\r\n      </ul>\r\n      <hr/>            \r\n      <Outlet/>\r\n    </Main>\r\n  )\r\n}\r\n"],"names":["SpinnerWrapper","styled","SpinnerCircular","size","thickness","speed","color","secondaryColor","API_KEY","BASE_URL","fetchTrendCollection","axios","fetchMovieByKeyWord","value","fetchMovieById","filmId","fetchMovieCredits","movieId","fetchMovieReviews","Main","Box","Img","Div1","Div2","Button","LinkStyled","Link","LinkStyledAddIn","NavLink","MovieDetailsPage","moviesId","useParams","useState","movie","setMovie","loading","setLoading","location","useLocation","grandPath","useRef","useEffect","then","data","poster_path","title","name","overview","vote_average","genres","poster","genresValues","length","map","join","catch","error","console","log","toast","finally","setTimeout","position","Loader","type","to","current","state","from","src","alt"],"sourceRoot":""}