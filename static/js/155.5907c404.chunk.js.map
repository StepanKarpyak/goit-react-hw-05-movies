{"version":3,"file":"static/js/155.5907c404.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","fetchApi/fetchApi.js","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","page/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;","import {SpinnerCircular} from 'spinners-react';\r\nimport { SpinnerWrapper } from './Loader.styled';\r\n\r\nconst Loader = () => (\r\n  <SpinnerWrapper>\r\n    <SpinnerCircular size={50} thickness={100} speed={100} color=\"#1eee0b\" secondaryColor=\"rgba(0, 0, 0, 0.44)\" />\r\n  </SpinnerWrapper>\r\n);\r\n\r\nexport default Loader;","import axios from \"axios\";\r\n\r\nconst API_KEY = '330e0c7492d2da195764b5f6a5017e6c';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport async function fetchTrendCollection() {\r\n  return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n};\r\n\r\nexport async function fetchMovieByKeyWord(value) {\r\n  return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${value}&include_adult=false`);\r\n};\r\n\r\nexport async function fetchMovieById(filmId) {\r\n  return await axios.get(`${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`);  \r\n};\r\nexport async function fetchMovieCredits(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n};\r\n\r\nexport async function fetchMovieReviews(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);  \r\n};","import styled from 'styled-components';\r\n\r\nexport const Box = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  display: inline-block;\r\n  margin-right: 15px;\r\n  width: 20%;\r\n  border-radius: 5px;\r\n  font-size: 20px;\r\n  outline: none;\r\n  border-color: dimgrey;;\r\n  &::placeholder {\r\n    font: inherit;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\ndisplay: inline-block;\r\n  width: 10%;\r\n  height: 29px;\r\n  border: 0;\r\n  cursor: pointer;\r\n  outline: none;\r\n  opacity: 0.8;\r\n  background-color: slategrey;\r\n  border-radius: 5px;\r\n\r\n  &:hover, &:focus {\r\n    opacity: 1;\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport toast from 'react-hot-toast';\r\nimport { Box, Form, Input, Button } from './Searchbar.styled';\r\n\r\nfunction Searchbar({propSubmit}) {\r\n  const [inputFilmValue, setInputFilmValue] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { value } = e.currentTarget;\r\n\r\n    setInputFilmValue(value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (inputFilmValue.trim() === '') {\r\n      toast.error('Please, fill in the field of search');\r\n      return;\r\n    }\r\n\r\n    propSubmit(inputFilmValue);\r\n\r\n    setInputFilmValue('');\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Input type=\"text\" autoComplete=\"off\" autoFocus placeholder=\"Search movies by keyword\"\r\n        value={inputFilmValue} onChange={handleChange} />\r\n        <Button type=\"submit\">\r\n          Search\r\n        </Button>\r\n      </Form>\r\n    </Box>    \r\n  );\r\n};\r\n\r\nexport default Searchbar;\r\n\r\nSearchbar.propTypes = {\r\n  propSubmit: PropTypes.func.isRequired,\r\n};","import { useState, useEffect } from \"react\";\r\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\r\nimport { Toaster, toast } from 'react-hot-toast';\r\nimport Searchbar from '../components/Searchbar/Searchbar';\r\nimport { fetchMovieByKeyWord } from '../fetchApi/fetchApi';\r\nimport Loader from '../components/Loader/Loader';\r\n\r\nexport function MoviesPage() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [errorM, setErrorM] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n  const searchFilmValue = searchParams.get('value');\r\n  const location = useLocation();\r\n\r\n  const addSearchValue = fromData => {\r\n    setSearchParams({ value: fromData })\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchFilmValue === '') {\r\n      return;\r\n    };\r\n  \r\n    if (searchFilmValue) {\r\n      setLoading(true);\r\n      fetchMovieByKeyWord(searchFilmValue)\r\n        .then(data => {\r\n          const { data: { results } } = data;\r\n\r\n          if (results.length === 0) {\r\n            return toast.error('Sorry, there are no movies. Try another request...');\r\n          };\r\n\r\n          setMovies(results);\r\n        })\r\n        .catch(error => {\r\n          setErrorM(error);\r\n        })\r\n\r\n        .finally(() => {\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n          }, 1000)\r\n        });\r\n    }\r\n  }, [searchFilmValue]);\r\n\r\n  return (\r\n    <div>\r\n      <Toaster position=\"top-right\" />\r\n      <Searchbar propSubmit={addSearchValue} />\r\n      {loading && <Loader />}\r\n      <ul>\r\n        {movies.map(({id, title, name}) => (\r\n          <li key={id}><Link to={`${id}`} state={{ from: location }}>{title ? title : name}</Link></li>\r\n        ))}\r\n      </ul>\r\n      {errorM && <h2>Whoops, something went wrong: error.</h2>}\r\n    </div>\r\n  )\r\n}"],"names":["SpinnerWrapper","styled","SpinnerCircular","size","thickness","speed","color","secondaryColor","API_KEY","BASE_URL","fetchTrendCollection","axios","fetchMovieByKeyWord","value","fetchMovieById","filmId","fetchMovieCredits","movieId","fetchMovieReviews","Box","Form","Input","Button","propSubmit","useState","inputFilmValue","setInputFilmValue","onSubmit","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","MoviesPage","movies","setMovies","errorM","setErrorM","loading","setLoading","useSearchParams","searchParams","setSearchParams","searchFilmValue","get","location","useLocation","useEffect","then","data","results","length","catch","error","finally","setTimeout","position","fromData","Loader","map","id","title","name","to","state","from"],"sourceRoot":""}