{"version":3,"file":"static/js/155.5907c404.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","fetchApi/fetchApi.js","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","page/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SpinnerWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;","import {SpinnerCircular} from 'spinners-react';\nimport { SpinnerWrapper } from './Loader.styled';\n\nconst Loader = () => (\n  <SpinnerWrapper>\n    <SpinnerCircular size={50} thickness={100} speed={100} color=\"#1eee0b\" secondaryColor=\"rgba(0, 0, 0, 0.44)\" />\n  </SpinnerWrapper>\n);\n\nexport default Loader;","import axios from \"axios\";\n\nconst API_KEY = '330e0c7492d2da195764b5f6a5017e6c';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrendCollection() {\n  return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n};\n\nexport async function fetchMovieByKeyWord(value) {\n  return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${value}&include_adult=false`);\n};\n\nexport async function fetchMovieById(filmId) {\n  return await axios.get(`${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`);  \n};\nexport async function fetchMovieCredits(movieId) {\n  return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\n};\n\nexport async function fetchMovieReviews(movieId) {\n  return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);  \n};","import styled from 'styled-components';\n\nexport const Box = styled.div`\n  padding: 20px;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  margin-right: 15px;\n  width: 20%;\n  border-radius: 5px;\n  font-size: 20px;\n  outline: none;\n  border-color: dimgrey;;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const Button = styled.button`\ndisplay: inline-block;\n  width: 10%;\n  height: 29px;\n  border: 0;\n  cursor: pointer;\n  outline: none;\n  opacity: 0.8;\n  background-color: slategrey;\n  border-radius: 5px;\n\n  &:hover, &:focus {\n    opacity: 1;\n  }\n`;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport { Box, Form, Input, Button } from './Searchbar.styled';\n\nfunction Searchbar({propSubmit}) {\n  const [inputFilmValue, setInputFilmValue] = useState('');\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n\n    setInputFilmValue(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputFilmValue.trim() === '') {\n      toast.error('Please, fill in the field of search');\n      return;\n    }\n\n    propSubmit(inputFilmValue);\n\n    setInputFilmValue('');\n  };\n\n  return (\n    <Box>\n      <Form onSubmit={handleSubmit}>\n        <Input type=\"text\" autoComplete=\"off\" autoFocus placeholder=\"Search movies by keyword\"\n        value={inputFilmValue} onChange={handleChange} />\n        <Button type=\"submit\">\n          Search\n        </Button>\n      </Form>\n    </Box>    \n  );\n};\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  propSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { Toaster, toast } from 'react-hot-toast';\nimport Searchbar from '../components/Searchbar/Searchbar';\nimport { fetchMovieByKeyWord } from '../fetchApi/fetchApi';\nimport Loader from '../components/Loader/Loader';\n\nexport function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [errorM, setErrorM] = useState(null);\n  const [loading, setLoading] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n  const searchFilmValue = searchParams.get('value');\n  const location = useLocation();\n\n  const addSearchValue = fromData => {\n    setSearchParams({ value: fromData })\n  };\n\n  useEffect(() => {\n    if (searchFilmValue === '') {\n      return;\n    };\n  \n    if (searchFilmValue) {\n      setLoading(true);\n      fetchMovieByKeyWord(searchFilmValue)\n        .then(data => {\n          const { data: { results } } = data;\n\n          if (results.length === 0) {\n            return toast.error('Sorry, there are no movies. Try another request...');\n          };\n\n          setMovies(results);\n        })\n        .catch(error => {\n          setErrorM(error);\n        })\n\n        .finally(() => {\n          setTimeout(() => {\n            setLoading(false);\n          }, 1000)\n        });\n    }\n  }, [searchFilmValue]);\n\n  return (\n    <div>\n      <Toaster position=\"top-right\" />\n      <Searchbar propSubmit={addSearchValue} />\n      {loading && <Loader />}\n      <ul>\n        {movies.map(({id, title, name}) => (\n          <li key={id}><Link to={`${id}`} state={{ from: location }}>{title ? title : name}</Link></li>\n        ))}\n      </ul>\n      {errorM && <h2>Whoops, something went wrong: error.</h2>}\n    </div>\n  )\n}"],"names":["SpinnerWrapper","styled","SpinnerCircular","size","thickness","speed","color","secondaryColor","API_KEY","BASE_URL","fetchTrendCollection","axios","fetchMovieByKeyWord","value","fetchMovieById","filmId","fetchMovieCredits","movieId","fetchMovieReviews","Box","Form","Input","Button","propSubmit","useState","inputFilmValue","setInputFilmValue","onSubmit","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","MoviesPage","movies","setMovies","errorM","setErrorM","loading","setLoading","useSearchParams","searchParams","setSearchParams","searchFilmValue","get","location","useLocation","useEffect","then","data","results","length","catch","error","finally","setTimeout","position","fromData","Loader","map","id","title","name","to","state","from"],"sourceRoot":""}